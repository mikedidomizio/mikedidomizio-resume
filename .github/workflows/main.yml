name: Build
on: push
jobs:
  test:
    name: Run test suites
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [ 12.x ]

    steps:
      - uses: actions/checkout@v1
        name: Checkout

      - uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}

      - name: Restore node_modules
        uses: actions/cache@v2
        id: node_modules-cache
        with:
          path: node_modules
          key: ${{ runner.os }}-yarn-v2-${{ hashFiles('yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-v2-

      - name: Install dependencies (if cache doesn't exist)
        if: steps.cache.outputs.cache-hit != 'true'
        run: yarn install --frozen-lockfile

      - name: Run tests for CI
        run: yarn ci:test

      # if the build fails, this should also include the diff output
      - name: Save build artifacts for pushing to S3 in deploy job
        uses: actions/upload-artifact@v2
        with:
          name: snapshots
          path: src/__tests__/__image_snapshots__/ci/

  code_coverage:
    needs: [test]
    name: Check code coverage and push coverage data
    runs-on: ubuntu-latest

    steps:
        # use hash for safety reasons, using master/tags can introduce security risks into workflow
      - name: Push Code Coverage
        uses: codecov/codecov-action@2838b54ec211d3f145409dbf867d4b3f22af4637
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: true # optional (default = false)
          verbose: true # optional (default = false)

  build:
    needs: [code_coverage]
    if: github.ref == 'refs/heads/master'
    name: Build product for deployment
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [ 12.x ]

    steps:
      - uses: actions/checkout@v1
        name: Checkout

      - uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}

      - name: Restore node_modules
        uses: actions/cache@v2
        id: node_modules-cache
        with:
          path: node_modules
          key: ${{ runner.os }}-yarn-v2-${{ hashFiles('yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-v2-

      - name: Install dependencies (if cache doesn't exist)
        if: steps.cache.outputs.cache-hit != 'true'
        run: yarn install --frozen-lockfile

      - name: Build for deploy
        run: yarn build

      - name: Save build artifacts for pushing to S3 in deploy job
        if: github.ref == 'refs/heads/master'
        uses: actions/upload-artifact@v2
        with:
          name: build-deploy
          path: dist/

  deploy:
    # the following is only done if the branch is master
    needs: [build]
    if: github.ref == 'refs/heads/master'
    name: Deploy to S3
    runs-on: ubuntu-latest

    steps:
      # when we download the artifacts it deploys into the current directory
      - name: Download build for deploy
        uses: actions/download-artifact@v2
        with:
          name: build-deploy

      - name: Configure AWS credentials
        # use hash for safety reasons, using master/tags can introduce security risks into workflow
        uses: aws-actions/configure-aws-credentials@51e2d042f8c5cf77f151685c9338e989dc0b8fc8
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Deploy static site to S3 bucket
        run: |
          aws s3 sync . s3://${{ secrets.AWS_S3_BUCKET }} --exclude "package*.json" --acl public-read
