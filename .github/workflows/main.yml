name: Build
on: push
jobs:
  # Builds the docker image to be used in subsequent jobs
  build_docker_image:
    name: Build Docker image
    runs-on: ubuntu-latest

    steps:
      # Check out code
      - name: Checkout
        uses: actions/checkout@v2
      # This is the a separate action that sets up buildx runner
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      # So now you can use Actions' own caching!
      - name: Restore Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
#      - name: Login to DockerHub
#        uses: docker/login-action@v1
#        with:
#          username: ${{ secrets.DOCKERHUB_USERNAME }}
#          password: ${{ secrets.DOCKERHUB_TOKEN }}
      # And make it available for the builds
      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          push: false
          tags: mikedidomizio/mikedidomizio.com:latest
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new
        # This ugly bit is necessary if you don't want your cache to grow forever
        # till it hits GitHub's limit of 5GB.
        # Temp fix
        # https://github.com/docker/build-push-action/issues/252
        # https://github.com/moby/buildkit/issues/1896
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache
  # Run the test coverage
  test:
    needs: [build_docker_image]
    name: Run test suites
    runs-on: ubuntu-latest

    steps:
      # Check out code
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      # So now you can use Actions' own caching!
      - name: Restore Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      #      - name: Login to DockerHub
      #        uses: docker/login-action@v1
      #        with:
      #          username: ${{ secrets.DOCKERHUB_USERNAME }}
      #          password: ${{ secrets.DOCKERHUB_TOKEN }}
      # And make it available for the builds
      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          push: false
          tags: mikedidomizio/mikedidomizio.com:latest
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new
      - name: Docker load the cache
        run: |
          docker image load --input /tmp/.buildx-cache-new
      - name: Run tests
        run: docker run -i --rm -v "$PWD/src/__tests__":/usr/src/app/src/__tests__ mikedidomizio/mikedidomizio.com:latest /bin/bash -c "pm2 start yarn --wait-ready --interpreter bash --name app -- serve; yarn ci:test"

  # Push the code coverage
  code_coverage:
    needs: [test]
    name: Check code coverage and push coverage data
    runs-on: ubuntu-latest

    steps:
        # use hash for safety reasons, using master/tags can introduce security risks into workflow
      - name: Push Code Coverage
        uses: codecov/codecov-action@2838b54ec211d3f145409dbf867d4b3f22af4637
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: true # optional (default = false)
          verbose: false # optional (default = false)

  # Uses the docker image to build the product
  build:
    needs: [code_coverage]
    if: github.ref == 'refs/heads/master'
    name: Build product for deployment
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v1
        name: Checkout

      - uses: satackey/action-docker-layer-caching@v0.0.11
        # Ignore the failure of a step and avoid terminating the job.
        continue-on-error: false
        with:
          key: docker-cache-{hash}
          restore-keys: |
            docker-cache-

      - name: Docker build
        run: docker run -it --rm -v "$PWD"/dist/usr/src/app/src/dist -it mikedidomizio/mikedidomizio.com:latest /bin/bash -c "yarn build"
      - name: Save build artifacts for pushing to S3 in deploy job

        if: github.ref == 'refs/heads/master'
        uses: actions/upload-artifact@v2
        with:
          name: build-deploy
          path: dist/

  # Deploys the website to S3
  deploy:
    # the following is only done if the branch is master
    needs: [build]
    if: github.ref == 'refs/heads/master'
    name: Deploy to S3
    runs-on: ubuntu-latest

    steps:
      # when we download the artifacts it deploys into the current directory
      - name: Download build for deploy
        uses: actions/download-artifact@v2
        with:
          name: build-deploy

      - name: Configure AWS credentials
        # use hash for safety reasons, using master/tags can introduce security risks into workflow
        uses: aws-actions/configure-aws-credentials@51e2d042f8c5cf77f151685c9338e989dc0b8fc8
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Deploy static site to S3 bucket
        run: |
          aws s3 sync . s3://${{ secrets.AWS_S3_BUCKET }} --exclude "package*.json" --acl public-read
